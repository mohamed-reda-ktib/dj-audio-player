#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# the design is generated by wxGlade 1.0.4


#standers modules import
import wx
import sounddevice as sd
import soundfile as sf
import time
from threading import Thread
import gettext

#local modules import
from menu_bar import MenuBar
from audio import AudioPlayer


#the main panel of the app
class MainPanel(wx.Panel):
    """The main panel of the app.
    It contains all widgets of the main panel withe the design.
    It contains also the logic to make thiese widgets do its job.
    These widgets are: info widgets, main playback controls, monitoring playback controls and music list and short audios list.
    """
    #class constructor
    def __init__(self, *args, **kwds):
        """The class constructor.
        It initializes the class and calls all the main related methods to display the main panel.
        These methods are: info_widgets, main_playback_controls, monitoring_playback_controls and music_list .
        """
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)
        self.info_widgets()
        self.main_playback_controls()
        self.monitoring_playback_controls()
        self.add_music_list()


#the main panel info widgets with their design
    def info_widgets(self):
        """The main panel info widgets with their design.
        This method contains some widgets providing info about:
        -the current playing music,
        -the music duration,
        -the passed time,
        -the remaining time,
        -the previous media item,
        -and the next media item.
        """
        #main horizontal box sizer
        self.main_HS = wx.BoxSizer(wx.HORIZONTAL)
        #main vertical box sizer
        self.main_VS = wx.BoxSizer(wx.VERTICAL)
        self.main_HS.Add(self.main_VS, 1, wx.ALL | wx.EXPAND, 5)
#info widgets and design
        info_HS = wx.BoxSizer(wx.HORIZONTAL)
        self.main_VS.Add(info_HS, 1, wx.BOTTOM | wx.EXPAND, 5)
        aud_title_lbl = wx.StaticText(self, wx.ID_ANY, _("Audio title"))
        info_HS.Add(aud_title_lbl, 1, wx.ALL | wx.EXPAND, 5)
        duration_lbl = wx.StaticText(self, wx.ID_ANY, _("Duration"))
        info_HS.Add(duration_lbl, 1, wx.ALL | wx.EXPAND, 5)
        time_passed_lbl = wx.StaticText(self, wx.ID_ANY, _("Time passed"))
        info_HS.Add(time_passed_lbl, 1, wx.ALL | wx.EXPAND, 5)
        time_remaining_lbl = wx.StaticText(self, wx.ID_ANY, _("Time remaining"))
        info_HS.Add(time_remaining_lbl, 1, wx.ALL | wx.EXPAND, 5)
        previous_media_lbl = wx.StaticText(self, wx.ID_ANY, _("Previous media title"))
        info_HS.Add(previous_media_lbl, 1, wx.ALL | wx.EXPAND, 5)
        next_media_lbl = wx.StaticText(self, wx.ID_ANY, _("Next media title"))
        info_HS.Add(next_media_lbl, 1, wx.ALL | wx.EXPAND, 5)

    #main playback device controls with their design
    def main_playback_controls(self):
        """Main playback device controls with their design.
        These controls are:
        -rewind button,
        -pause media item button,
        -fast forward button,
        -previous media item button,
        -stop media item button,
        -and next media item button.
        """
        #main playback device controls and their design
        main_ctrl_HS = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Main playback device")), wx.HORIZONTAL)
        self.main_VS.Add(main_ctrl_HS, 1, wx.EXPAND, 0)
        main_ctrl_GS = wx.GridBagSizer(5, 5)
        main_ctrl_HS.Add(main_ctrl_GS, 1, wx.BOTTOM | wx.TOP, 5)
        self.rewind_btn = wx.Button(self, wx.ID_ANY, _("Rewind"))
        main_ctrl_GS.Add(self.rewind_btn, (0, 0), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.pause_btn = wx.ToggleButton(self, wx.ID_ANY, _("Pause/play"))
        main_ctrl_GS.Add(self.pause_btn, (0, 1), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.fast_btn = wx.Button(self, wx.ID_ANY, _("fast forward"))
        main_ctrl_GS.Add(self.fast_btn, (0, 2), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.previous_btn = wx.Button(self, wx.ID_ANY, _("Previous item"))
        main_ctrl_GS.Add(self.previous_btn, (1, 0), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.stop_btn = wx.ToggleButton(self, wx.ID_ANY, _("Stop/play"))
        main_ctrl_GS.Add(self.stop_btn, (1, 1), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.next_btn = wx.Button(self, wx.ID_ANY, _("Next item"))
        main_ctrl_GS.Add(self.next_btn, (1, 2), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)

    #monitor playback device controls with their design
    def monitoring_playback_controls(self):
        """Monitoring playback device controls with their design.
        These controls are:
        -rewind button,
        -pause media item button,
        -fast forward button,
        -previous media item button,
        -stop media item button,
        -and next media item button.
        """
        #monitoringplayback device controls and their design
        monitoring_ctrl_HS = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Monitoring playback device")), wx.HORIZONTAL)
        self.main_VS.Add(monitoring_ctrl_HS, 1, wx.EXPAND, 0)
        monitoring_ctrl_GS = wx.GridBagSizer(5, 5)
        monitoring_ctrl_HS.Add(monitoring_ctrl_GS, 1, wx.BOTTOM | wx.TOP, 5)
        self.rewind_btn_copy = wx.Button(self, wx.ID_ANY, _("Rewind"))
        monitoring_ctrl_GS.Add(self.rewind_btn_copy, (0, 0), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.pause_btn_copy = wx.ToggleButton(self, wx.ID_ANY, _("Pause/play"))
        monitoring_ctrl_GS.Add(self.pause_btn_copy, (0, 1), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.fast_btn_copy = wx.Button(self, wx.ID_ANY, _("fast forward"))
        monitoring_ctrl_GS.Add(self.fast_btn_copy, (0, 2), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.previous_btn_copy = wx.Button(self, wx.ID_ANY, _("Previous item"))
        monitoring_ctrl_GS.Add(self.previous_btn_copy, (1, 0), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.stop_btn_copy = wx.ToggleButton(self, wx.ID_ANY, _("Stop/play"))
        monitoring_ctrl_GS.Add(self.stop_btn_copy, (1, 1), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)
        self.next_btn_copy = wx.Button(self, wx.ID_ANY, _("Next item"))
        monitoring_ctrl_GS.Add(self.next_btn_copy, (1, 2), (1, 1), wx.ALIGN_CENTER | wx.ALL, 5)

    #music list and short audios lists
    def add_music_list(self):
        """Music list and short audios lists.
        This method contains the music list that includ all opened music
        and another list including all opend short audios
        """
        #music list and short audios lists
        aud_list_VS = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Music list")), wx.VERTICAL)
        self.main_HS.Add(aud_list_VS, 1, wx.EXPAND, 0)
        aud_list_GS = wx.FlexGridSizer(2, 2, 3, 5)
        aud_list_VS.Add(aud_list_GS, 1, wx.EXPAND, 0)
        music_list_lbl = wx.StaticText(self, wx.ID_ANY, _("Music list"))
        aud_list_GS.Add(music_list_lbl, 0, 0, 0)
        self.music_list = wx.ListBox(self, wx.ID_ANY, choices=[_("choice 1")])
        self.music_list.SetSelection(0)
        aud_list_GS.Add(self.music_list, 1, wx.ALL | wx.EXPAND, 5)
        audio_list_lbl = wx.StaticText(self, wx.ID_ANY, _("Short audios list"))
        aud_list_GS.Add(audio_list_lbl, 0, 0, 0)
        self.audio_list = wx.ListBox(self, wx.ID_ANY, choices=[_("choice 1")])
        self.audio_list.SetSelection(0)
        aud_list_GS.Add(self.audio_list, 1, wx.ALL | wx.EXPAND, 5)
        aud_list_VS.Add((0, 0), 0, 0, 0)
        aud_list_GS.AddGrowableCol(1)
        
        #set the final layout
        self.SetSizer(self.main_HS)
        self.Layout()


#main frame app class
class DJAudioPlayer(wx.Frame):
    """The main class for the app frame.
    It calls the main panel and all necessary logic to make the app work.
    It also adds the menu bar
    """
    #constructor
    def __init__(self, *args, **kwds):
        """The class constructor.
        It initializes the class and calls the logic to make the app work.
        It also set the title, the size and the design of the app.
        """
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1296, 696))
        self.SetTitle(_("DJ Audio Player"))
        #adding the main panel to the frame
        self.main_pnl = MainPanel(self, wx.ID_ANY)
        #adding menu bar
        menubar = MenuBar(self.main_pnl.music_list, self.main_pnl.audio_list)
        self.SetMenuBar(menubar)
        #setting the layout
        self.Layout()
        self.Centre()

        
#settings dialog widgets with their design
class SettingsDialog(wx.Dialog):
    """Settings dialog widgets with their design.
    It contains also the logic to make this widgets work.
    """
    #constructor
    def __init__(self, *args, **kwds):
        """The constructor of the class.
        This method initializes the class and calls related methods to show the settings dialog.
        It also sets the title of the dialog.
        """
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        #setting the title
        self.SetTitle(_("Settings"))
        #adding the main panel to the dialog
        self.main_dlg_paenl()


        #main panel of dialog settings with its design
        def main_dlg_paenl(self):
            """The main panel of the dialog settings with its design.
            It contains parameters that can be customized by the user like the main playback device and the monitoring playback device.
            """
        pnl = wx.Panel(self)
        main_settings_VS = wx.BoxSizer(wx.VERTICAL)
        main_device_HS = wx.BoxSizer(wx.HORIZONTAL)
        main_settings_VS.Add(main_device_HS, 1, wx.EXPAND, 0)
        main_devices_lbl = wx.StaticText(pnl, wx.ID_ANY, _("Choice main device playback"))
        main_device_HS.Add(main_devices_lbl, 0, 0, 0)
        self.Main_devices_list = wx.ComboBox(pnl, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        main_device_HS.Add(self.Main_devices_list, 1, wx.EXPAND, 0)
        monitoring_device_HS = wx.BoxSizer(wx.HORIZONTAL)
        main_settings_VS.Add(monitoring_device_HS, 1, wx.EXPAND, 0)
        monitoring_devices_lbl = wx.StaticText(pnl, wx.ID_ANY, _("Choice monitoring device playback"))
        monitoring_device_HS.Add(monitoring_devices_lbl, 0, 0, 0)
        self.monitoring_devices_list = wx.ComboBox(pnl, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        monitoring_device_HS.Add(self.monitoring_devices_list, 1, wx.EXPAND, 0)
        buttons_SDBS = wx.StdDialogButtonSizer()
        main_settings_VS.Add(buttons_SDBS, 0, wx.ALIGN_RIGHT | wx.ALL, 4)
        self.cancel_btn = wx.Button(pnl, wx.ID_CANCEL, "")
        buttons_SDBS.AddButton(self.cancel_btn)
        self.ok_btn = wx.Button(pnl, wx.ID_OK, "")
        self.ok_btn.SetDefault()
        buttons_SDBS.AddButton(self.ok_btn)
        self.apply_btn = wx.Button(pnl, wx.ID_APPLY, "")
        buttons_SDBS.AddButton(self.apply_btn)
        buttons_SDBS.Realize()
        
        #setting sizer
        pnl.SetSizer(main_settings_VS)
        self.SetSizer(main_settings_VS)
        main_settings_VS.Fit(self)
        self.SetAffirmativeId(self.ok_btn.GetId())
        self.SetEscapeId(self.cancel_btn.GetId())
        self.Layout()
        self.Centre()


#the app class to run the programme
class MyApp(wx.App):
    def OnInit(self):
        self.DJ_audio_player = DJAudioPlayer(None, wx.ID_ANY, "")
        self.SetTopWindow(self.DJ_audio_player)
        self.DJ_audio_player.Show()
        return True


#running the app and setting the interface language
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name
    app = MyApp(0)
    app.MainLoop()
